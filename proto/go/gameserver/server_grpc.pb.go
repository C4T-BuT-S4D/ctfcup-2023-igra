// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: gameserver/server.proto

package gameserver

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GameServerClient is the client API for GameServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GameServerClient interface {
	Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error)
	ProcessEvent(ctx context.Context, opts ...grpc.CallOption) (GameServer_ProcessEventClient, error)
}

type gameServerClient struct {
	cc grpc.ClientConnInterface
}

func NewGameServerClient(cc grpc.ClientConnInterface) GameServerClient {
	return &gameServerClient{cc}
}

func (c *gameServerClient) Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error) {
	out := new(PingResponse)
	err := c.cc.Invoke(ctx, "/gameserver.GameServer/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameServerClient) ProcessEvent(ctx context.Context, opts ...grpc.CallOption) (GameServer_ProcessEventClient, error) {
	stream, err := c.cc.NewStream(ctx, &GameServer_ServiceDesc.Streams[0], "/gameserver.GameServer/ProcessEvent", opts...)
	if err != nil {
		return nil, err
	}
	x := &gameServerProcessEventClient{stream}
	return x, nil
}

type GameServer_ProcessEventClient interface {
	Send(*ClientEventRequest) error
	Recv() (*ServerEvent, error)
	grpc.ClientStream
}

type gameServerProcessEventClient struct {
	grpc.ClientStream
}

func (x *gameServerProcessEventClient) Send(m *ClientEventRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *gameServerProcessEventClient) Recv() (*ServerEvent, error) {
	m := new(ServerEvent)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// GameServerServer is the server API for GameServer service.
// All implementations must embed UnimplementedGameServerServer
// for forward compatibility
type GameServerServer interface {
	Ping(context.Context, *PingRequest) (*PingResponse, error)
	ProcessEvent(GameServer_ProcessEventServer) error
	mustEmbedUnimplementedGameServerServer()
}

// UnimplementedGameServerServer must be embedded to have forward compatible implementations.
type UnimplementedGameServerServer struct {
}

func (UnimplementedGameServerServer) Ping(context.Context, *PingRequest) (*PingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedGameServerServer) ProcessEvent(GameServer_ProcessEventServer) error {
	return status.Errorf(codes.Unimplemented, "method ProcessEvent not implemented")
}
func (UnimplementedGameServerServer) mustEmbedUnimplementedGameServerServer() {}

// UnsafeGameServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GameServerServer will
// result in compilation errors.
type UnsafeGameServerServer interface {
	mustEmbedUnimplementedGameServerServer()
}

func RegisterGameServerServer(s grpc.ServiceRegistrar, srv GameServerServer) {
	s.RegisterService(&GameServer_ServiceDesc, srv)
}

func _GameServer_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServerServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gameserver.GameServer/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServerServer).Ping(ctx, req.(*PingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameServer_ProcessEvent_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GameServerServer).ProcessEvent(&gameServerProcessEventServer{stream})
}

type GameServer_ProcessEventServer interface {
	Send(*ServerEvent) error
	Recv() (*ClientEventRequest, error)
	grpc.ServerStream
}

type gameServerProcessEventServer struct {
	grpc.ServerStream
}

func (x *gameServerProcessEventServer) Send(m *ServerEvent) error {
	return x.ServerStream.SendMsg(m)
}

func (x *gameServerProcessEventServer) Recv() (*ClientEventRequest, error) {
	m := new(ClientEventRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// GameServer_ServiceDesc is the grpc.ServiceDesc for GameServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GameServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gameserver.GameServer",
	HandlerType: (*GameServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _GameServer_Ping_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ProcessEvent",
			Handler:       _GameServer_ProcessEvent_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "gameserver/server.proto",
}
