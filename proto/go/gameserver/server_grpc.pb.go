// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: gameserver/server.proto

package gameserver

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GameServerServiceClient is the client API for GameServerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GameServerServiceClient interface {
	Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error)
	ProcessEvent(ctx context.Context, opts ...grpc.CallOption) (GameServerService_ProcessEventClient, error)
	GetInventory(ctx context.Context, in *InventoryRequest, opts ...grpc.CallOption) (*InventoryResponse, error)
}

type gameServerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGameServerServiceClient(cc grpc.ClientConnInterface) GameServerServiceClient {
	return &gameServerServiceClient{cc}
}

func (c *gameServerServiceClient) Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error) {
	out := new(PingResponse)
	err := c.cc.Invoke(ctx, "/gameserver.GameServerService/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameServerServiceClient) ProcessEvent(ctx context.Context, opts ...grpc.CallOption) (GameServerService_ProcessEventClient, error) {
	stream, err := c.cc.NewStream(ctx, &GameServerService_ServiceDesc.Streams[0], "/gameserver.GameServerService/ProcessEvent", opts...)
	if err != nil {
		return nil, err
	}
	x := &gameServerServiceProcessEventClient{stream}
	return x, nil
}

type GameServerService_ProcessEventClient interface {
	Send(*ClientEventRequest) error
	Recv() (*ServerEvent, error)
	grpc.ClientStream
}

type gameServerServiceProcessEventClient struct {
	grpc.ClientStream
}

func (x *gameServerServiceProcessEventClient) Send(m *ClientEventRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *gameServerServiceProcessEventClient) Recv() (*ServerEvent, error) {
	m := new(ServerEvent)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *gameServerServiceClient) GetInventory(ctx context.Context, in *InventoryRequest, opts ...grpc.CallOption) (*InventoryResponse, error) {
	out := new(InventoryResponse)
	err := c.cc.Invoke(ctx, "/gameserver.GameServerService/GetInventory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GameServerServiceServer is the server API for GameServerService service.
// All implementations must embed UnimplementedGameServerServiceServer
// for forward compatibility
type GameServerServiceServer interface {
	Ping(context.Context, *PingRequest) (*PingResponse, error)
	ProcessEvent(GameServerService_ProcessEventServer) error
	GetInventory(context.Context, *InventoryRequest) (*InventoryResponse, error)
	mustEmbedUnimplementedGameServerServiceServer()
}

// UnimplementedGameServerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedGameServerServiceServer struct {
}

func (UnimplementedGameServerServiceServer) Ping(context.Context, *PingRequest) (*PingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedGameServerServiceServer) ProcessEvent(GameServerService_ProcessEventServer) error {
	return status.Errorf(codes.Unimplemented, "method ProcessEvent not implemented")
}
func (UnimplementedGameServerServiceServer) GetInventory(context.Context, *InventoryRequest) (*InventoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInventory not implemented")
}
func (UnimplementedGameServerServiceServer) mustEmbedUnimplementedGameServerServiceServer() {}

// UnsafeGameServerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GameServerServiceServer will
// result in compilation errors.
type UnsafeGameServerServiceServer interface {
	mustEmbedUnimplementedGameServerServiceServer()
}

func RegisterGameServerServiceServer(s grpc.ServiceRegistrar, srv GameServerServiceServer) {
	s.RegisterService(&GameServerService_ServiceDesc, srv)
}

func _GameServerService_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServerServiceServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gameserver.GameServerService/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServerServiceServer).Ping(ctx, req.(*PingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameServerService_ProcessEvent_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GameServerServiceServer).ProcessEvent(&gameServerServiceProcessEventServer{stream})
}

type GameServerService_ProcessEventServer interface {
	Send(*ServerEvent) error
	Recv() (*ClientEventRequest, error)
	grpc.ServerStream
}

type gameServerServiceProcessEventServer struct {
	grpc.ServerStream
}

func (x *gameServerServiceProcessEventServer) Send(m *ServerEvent) error {
	return x.ServerStream.SendMsg(m)
}

func (x *gameServerServiceProcessEventServer) Recv() (*ClientEventRequest, error) {
	m := new(ClientEventRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _GameServerService_GetInventory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InventoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServerServiceServer).GetInventory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gameserver.GameServerService/GetInventory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServerServiceServer).GetInventory(ctx, req.(*InventoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GameServerService_ServiceDesc is the grpc.ServiceDesc for GameServerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GameServerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gameserver.GameServerService",
	HandlerType: (*GameServerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _GameServerService_Ping_Handler,
		},
		{
			MethodName: "GetInventory",
			Handler:    _GameServerService_GetInventory_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ProcessEvent",
			Handler:       _GameServerService_ProcessEvent_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "gameserver/server.proto",
}
